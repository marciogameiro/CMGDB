# Build and publish Python distribution package to TestPyPI and PyPI
# Trigger build only when a tag is pushed
name: Build and publish wheels

on:
  push:
    tags:
      - v* # Push events to v* tags
  # pull_request:
  #   branches:
  #     - master
  # Manual run
  workflow_dispatch:

env:
  BUILD_TYPE: Release

jobs:
  # Build wheels for Linux, macOS, and Windows
  build_wheels:
    name: Wheel for ${{ matrix.buildplat[0] }}-${{ matrix.python }}-${{ matrix.buildplat[2] }}
    runs-on: ${{ matrix.buildplat[0] }}

    strategy:
      # Build the other wheels even if one fails
      fail-fast: false
      matrix:
        # Build wheels for CPython and PyPy when available
        buildplat:
          # macos-13 is intel, macos-latest is apple silicon
          - [ubuntu-latest,  x86_64,  manylinux_x86_64 ]
          - [ubuntu-latest,  aarch64, manylinux_aarch64]
          - [ubuntu-latest,  i686,    manylinux_i686   ]
          - [ubuntu-latest,  x86_64,  musllinux_x86_64 ]
          - [ubuntu-latest,  aarch64, musllinux_aarch64]
          - [ubuntu-latest,  i686,    musllinux_i686   ]
          - [macos-13,       x86_64,  macosx_x86_64    ]
          - [macos-latest,   arm64,   macosx_arm64     ]
          - [windows-latest, AMD64,   win_amd64        ]
          # Not working on win_arm64 and win32 for now
          # - [windows-latest, ARM64,   win_arm64        ]
          # - [windows-latest, x86,     win32            ]
        python: [cp*, pp*]
        # Need to adjust the exclude below for different choices of Python
        # python: [cp310, pp39]
        # python: [cp3{9,11}, pp3{9,10}]
        # python: [cp36, cp37, cp38, cp39, cp310, cp311, cp312, pp37, pp38, pp39, pp310]
        exclude:
          # PyPy not available for musllinux and Windows ARM64 and win32
          - buildplat: [ubuntu-latest,  x86_64,  musllinux_x86_64 ]
            python: pp*
          - buildplat: [ubuntu-latest,  aarch64, musllinux_aarch64]
            python: pp*
          - buildplat: [ubuntu-latest,  i686,    musllinux_i686   ]
            python: pp*
          # - buildplat: [windows-latest, ARM64,   win_arm64        ]
          #   python: pp*
          # - buildplat: [windows-latest, x86,     win32            ]
          #   python: pp*
        include:
          # Configuration flags for Install Boost action and target macOS
          - buildplat: [macos-13,       x86_64,  macosx_x86_64    ]
            macosx_deployment_target: 11.0
            platform_version: 11
            link: static+shared
            toolset: clang
          # Configuration flag for target macOS
          - buildplat: [macos-latest,   arm64,   macosx_arm64     ]
            macosx_deployment_target: 14.0
          # - buildplat: [windows-latest, AMD64,   win_amd64        ]
          #   platform_version: 2022
          #   link: static
          #   toolset: msvc
          # - buildplat: [ubuntu-latest,  x86_64,  manylinux_x86_64 ]
          #   platform_version: 22.04
          #   link: static+shared
          #   toolset: gcc

    steps:
      - name: Set up QEMU
        if: matrix.buildplat[1] == 'aarch64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Checkout repository and submodules
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up Python for Windows
        if: runner.os == 'Windows'
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install boost for macOS Intel
      # - name: Install boost for Windows Intel and macOS Intel
        if: matrix.buildplat[2] == 'macosx_x86_64'
        # if: matrix.buildplat[2] == 'macosx_x86_64' || matrix.buildplat[2] == 'win_amd64'
        uses: MarkusJx/install-boost@v2.5.0
        id: install-boost
        with:
          boost_version: 1.80.0
          platform_version: ${{ matrix.platform_version }}
          link: ${{ matrix.link }}
          toolset: ${{ matrix.toolset }}
          arch: x86

      - name: Install boost for macOS ARM
        if: matrix.buildplat[2] == 'macosx_arm64'
        id: install-boost-macos-arm
        run: |
          INSTALL_PREFIX="/Users/runner"
          curl -L -o boost_1_80_0.tar.bz2 https://archives.boost.io/release/1.80.0/source/boost_1_80_0.tar.bz2
          tar --bzip2 -xf boost_1_80_0.tar.bz2
          cd boost_1_80_0
          ./bootstrap.sh --prefix=${INSTALL_PREFIX}
          ./b2 install -d0 -j4 architecture=arm cxxflags="-arch arm64 -mmacosx-version-min=11.0" --with-chrono --with-thread --with-serialization --with-date_time --with-atomic
          echo "BOOST_ROOT=${INSTALL_PREFIX}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Install Boost for Windows
        if: runner.os == 'Windows'
        id: install-boost-windows
        run: |
          INSTALL_PREFIX="C:/boost"
          curl -L -o boost_1_80_0.tar.bz2 https://archives.boost.io/release/1.80.0/source/boost_1_80_0.tar.bz2
          tar --bzip2 -xf boost_1_80_0.tar.bz2
          cd boost_1_80_0
          ./bootstrap.sh --prefix=${INSTALL_PREFIX}
          # ./b2 install -d0 -j4 toolset=msvc address-model=32,64 variant=release link=static runtime-link=static --with-chrono --with-thread --with-serialization --with-date_time --with-atomic
          # ./b2 install -d0 -j4 toolset=msvc variant=release link=static runtime-link=static --with-chrono --with-thread --with-serialization --with-date_time --with-atomic
          ./b2 install -d0 -j4 toolset=msvc link=static runtime-link=static --with-chrono --with-thread --with-serialization --with-date_time --with-atomic
          # Install Boost with vcpkg
          # vcpkg install boost-chrono boost-thread boost-serialization --triplet x64-windows
          # Boost_INCLUDE_DIRS is C:/vcpkg/installed/x64-windows/include
          # Boost_LIBRARY_DIRS is C:/vcpkg/installed/x64-windows/lib
          # vcpkg install boost-chrono boost-thread boost-serialization --triplet x64-windows-static
          # Boost_INCLUDE_DIRS is C:/vcpkg/installed/x64-windows-static/include
          # Boost_LIBRARY_DIRS is C:/vcpkg/installed/x64-windows-static/lib
          echo "BOOST_ROOT=${INSTALL_PREFIX}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Set BOOST_ROOT
        id: set-boost-root
        run: |
          # if [ "${{ matrix.buildplat[2] }}" = "macosx_x86_64" ] || [ "${{ matrix.buildplat[2] }}" = "win_amd64" ]; then
          if [ "${{ matrix.buildplat[2] }}" = "macosx_x86_64" ]; then
            echo "BOOST_ROOT=${{ steps.install-boost.outputs.BOOST_ROOT }}" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.buildplat[2] }}" = "win_amd64" ]; then
            echo "BOOST_ROOT=${{ steps.install-boost-windows.outputs.BOOST_ROOT }}" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.buildplat[2] }}" = "macosx_arm64" ]; then
            echo "BOOST_ROOT=${{ steps.install-boost-macos-arm.outputs.BOOST_ROOT }}" >> $GITHUB_OUTPUT
          else
            echo "BOOST_ROOT=" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Install libraries for macOS
        if: runner.os == 'macOS'
        run: |
          brew upgrade
          # brew install boost
          brew install gmp
          brew tap Brewsci/bio
          brew install sdsl-lite
        shell: bash

      - name: Add msbuild to PATH
        if: runner.os == 'Windows'
        uses: microsoft/setup-msbuild@v2

      - name: Install GMP for Windows
        if: runner.os == 'Windows'
        id: install-gmp-windows
        run: |
          vcpkg install gmp
          # INCLUDE_DIR is C:/vcpkg/installed/x64-windows/include
          # LIBRARY_DIR is C:/vcpkg/installed/x64-windows/lib
          echo "GMP_ROOT=C:/vcpkg/installed/x64-windows" >> $GITHUB_OUTPUT
        shell: bash

      - name: Install sdsl-lite for Windows
        if: runner.os == 'Windows'
        id: install-sdsl-lite-windows
        run: |
          # The library is being installed into the cloned directory regardless
          # of INSTALL_PREFIX (INSTALL_PREFIX does not seem to be working).
          # The INSTALL_PREFIX below sets the correct SDSL_ROOT directory
          INSTALL_PREFIX='$GITHUB_WORKSPACE/sdsl-lite'
          # INSTALL_PREFIX='C:/sdsl-lite'
          git clone https://github.com/marciogameiro/sdsl-lite.git
          cd sdsl-lite
          ./install.bat
          # ./install.bat ${INSTALL_PREFIX}
          echo "SDSL_ROOT='${INSTALL_PREFIX}'/build" >> $GITHUB_OUTPUT
        shell: bash

      - name: Show library root directories
        run: |
          echo "BOOST_ROOT is " ${{ steps.set-boost-root.outputs.BOOST_ROOT }}
          echo "GMP_ROOT is " ${{ steps.install-gmp-windows.outputs.GMP_ROOT }}
          echo "SDSL_ROOT is " '${{ steps.install-sdsl-lite-windows.outputs.SDSL_ROOT }}'
        shell: bash

      - name: Build all wheels except for musllinux
        if: startsWith(matrix.buildplat[2], 'musllinux') != true
        uses: pypa/cibuildwheel@v2.23.0
        env:
          CIBW_BUILD: ${{ matrix.python }}-${{ matrix.buildplat[2] }}
          # Skip early versions of Python (for CPython and PyPy)
          CIBW_SKIP: cp36-* cp37-* cp38-* pp37-* pp38-*
          # # Skip CPython 3.6 on Windows
          # CIBW_SKIP: cp36-win*
          CIBW_ARCHS: ${{ matrix.buildplat[1] }}
          # CIBW_ARCHS_LINUX: x86_64
          # CIBW_ARCHS_MACOS: x86_64 arm64
          # CIBW_ARCHS_WINDOWS: AMD64
          MACOSX_DEPLOYMENT_TARGET: ${{ matrix.macosx_deployment_target }}
          # CIBW_ENVIRONMENT: BOOST_ROOT=${{ steps.set-boost-root.outputs.BOOST_ROOT }}
          CIBW_ENVIRONMENT_WINDOWS: >
            BOOST_ROOT=${{ steps.set-boost-root.outputs.BOOST_ROOT }}
            SDSL_ROOT=${{ steps.install-sdsl-lite-windows.outputs.SDSL_ROOT }}
            GMP_ROOT=${{ steps.install-gmp-windows.outputs.GMP_ROOT }}
          CIBW_ENVIRONMENT_MACOS: >
            BOOST_ROOT=${{ steps.set-boost-root.outputs.BOOST_ROOT }}
            MACOSX_DEPLOYMENT_TARGET=${{ matrix.macosx_deployment_target }}
          # CIBW_ENVIRONMENT_LINUX: BOOST_ROOT=${{ steps.set-boost-root.outputs.BOOST_ROOT }}
          CIBW_BEFORE_ALL_LINUX: >
            curl -L -o boost_1_80_0.tar.bz2 https://archives.boost.io/release/1.80.0/source/boost_1_80_0.tar.bz2 &&
            tar --bzip2 -xf boost_1_80_0.tar.bz2 && cd boost_1_80_0 && ./bootstrap.sh --prefix=/usr/local &&
            ./b2 install -d0 -j4 --with-chrono --with-thread --with-serialization --with-date_time --with-atomic &&
            ls -l /usr/local &&
            yum install -y gmp-devel &&
            git clone https://github.com/marciogameiro/sdsl-lite.git &&
            cd sdsl-lite && export CFLAGS=-fPIC && export CXXFLAGS=-fPIC &&
            ./install.sh /usr/local
            # yum install boost-devel
            # curl -L -o boost_1_80_0.tar.gz https://archives.boost.io/release/1.80.0/source/boost_1_80_0.tar.bz2
            # tar -xzf boost_1_80_0.tar.gz
          CIBW_BEFORE_BUILD_WINDOWS: pip install delvewheel
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: delvewheel repair -w {dest_dir} {wheel}
        with:
          output-dir: wheelhouse

      - name: Build wheels for musllinux
        if: startsWith(matrix.buildplat[2], 'musllinux')
        uses: pypa/cibuildwheel@v2.23.0
        env:
          CIBW_BUILD: ${{ matrix.python }}-${{ matrix.buildplat[2] }}
          # Skip early versions of Python
          CIBW_SKIP: cp36-* cp37-* cp38-* cp39-* cp310-*
          CIBW_ARCHS: ${{ matrix.buildplat[1] }}
          CIBW_BEFORE_ALL_LINUX: >
            curl -L -o boost_1_80_0.tar.bz2 https://archives.boost.io/release/1.80.0/source/boost_1_80_0.tar.bz2 &&
            tar --bzip2 -xf boost_1_80_0.tar.bz2 && cd boost_1_80_0 && ./bootstrap.sh --prefix=/usr/local &&
            ./b2 install -d0 -j4 --with-chrono --with-thread --with-serialization --with-date_time --with-atomic &&
            ls -l /usr/local &&
            apk add gmp-dev &&
            git clone https://github.com/simongog/sdsl-lite.git &&
            cd sdsl-lite && export CFLAGS=-fPIC && export CXXFLAGS=-fPIC &&
            ./install.sh /usr/local
        with:
          output-dir: wheelhouse

      - name: Show files
        run: ls -lh wheelhouse
        shell: bash

      - name: Verify clean directory
        run: git diff --exit-code
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.buildplat[0] }}-${{ matrix.buildplat[1] }}-${{ strategy.job-index }}
          # name: cibw-wheels-${{ matrix.os }}-${{ matrix.cibw_archs }}-${{ strategy.job-index }}
          path: wheelhouse/*.whl

  # Build source distribution on Linux
  build_sdist:
    name: Build SDist
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository and submodules
      uses: actions/checkout@v4
      with:
        submodules: true

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: python -m pip install setuptools twine

    - name: Build source tarball
      run: python setup.py sdist

    - name: Check metadata
      run: twine check dist/*.tar.gz

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: cibw-sdist
        path: dist/*.tar.gz

  # Upload the wheels and the source distribution
  upload_pypi:
    name: Upload to TestPyPI and PyPI
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest

    steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: cibw-*
        path: dist
        merge-multiple: true

    - name: Publish package to TestPyPI
      uses: pypa/gh-action-pypi-publish@v1.12.4
      with:
        user: __token__
        password: ${{ secrets.TEST_PYPI_TOKEN }}
        repository_url: https://test.pypi.org/legacy/
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')

    - name: Publish package to PyPI
      uses: pypa/gh-action-pypi-publish@v1.12.4
      with:
        user: __token__
        password: ${{ secrets.PYPI_TOKEN }}
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
